// SPDX-License-Identifier: MIT
%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.uint256 import Uint256, uint256_add, uint256_sub
from starkware.cairo.common.math import assert_nn
from starkware.cairo.common.alloc import alloc
from starkware.starknet.common.syscalls import get_caller_address, get_contract_address
from starkware.starknet.common.storage import Storage
from starkware.starknet.common.utils import to_uint256

@storage_var
func lender_balance(user: felt) -> (balance: Uint256):
end

@storage_var
func total_deposits() -> (amount: Uint256):
end

@storage_var
func borrower_collateral(user: felt) -> (collateral: Uint256):
end

@storage_var
func borrower_debt(user: felt) -> (debt: Uint256):
end

@storage_var
func user_credit_score(user: felt) -> (score: felt):
end

// === Deposit Function ===
@external
func deposit{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(amount: Uint256):
    alloc_locals
    let (caller) = get_caller_address()
    let (current) = lender_balance.read(caller)
    let (new_balance) = uint256_add(current, amount)
    lender_balance.write(caller, new_balance)

    let (total) = total_deposits.read()
    let (new_total) = uint256_add(total, amount)
    total_deposits.write(new_total)

    return ()
end

// === Borrow Function ===
@external
func borrow{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(
    borrow_amount: Uint256, collateral_amount: Uint256):
    alloc_locals
    let (caller) = get_caller_address()
    let (score) = user_credit_score.read(caller)

    // Simple logic: score >= 700 allows 90% LTV, else 70%
    let ltv: felt = if score >= 700 { 90 } else { 70 }

    // Collateral required = borrow_amount * 100 / ltv
    // (simplified, not handling decimals in this example)
    let required_collateral = borrow_amount.low * 100 / ltv
    assert collateral_amount.low >= required_collateral

    // Update storage
    let (existing_collateral) = borrower_collateral.read(caller)
    let (updated_collateral) = uint256_add(existing_collateral, collateral_amount)
    borrower_collateral.write(caller, updated_collateral)
    borrower_debt.write(caller, borrow_amount)

    return ()
end

// === Submit Credit Score ===
@external
func submit_score{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(score: felt):
    let (caller) = get_caller_address()
    user_credit_score.write(caller, score)
    return ()
end

// === Repay Loan ===
@external
func repay{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}(repay_amount: Uint256):
    let (caller) = get_caller_address()
    let (debt) = borrower_debt.read(caller)
    let (remaining) = uint256_sub(debt, repay_amount)
    borrower_debt.write(caller, remaining)
    return ()
end